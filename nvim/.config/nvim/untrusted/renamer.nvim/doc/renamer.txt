================================================================================
                                                                  *renamer.nvim*

Renamer.nvim is a plugin for a Visual-Studio-Code-like user interface for
renaming in neovim. It provides several ways to configure its aspect and uses
the LSP API to rename the current word under the cursor.

Calling setup also overrides the existing Neovim LSP handler for the rename
operation with the custom one of `renamer`. You can use this if you do not
want to use the plugin interface, but still want to benefit from quickfix list
popuplation, cursor setting at the end of the new word and more.

Getting started with renamer:
  1. Run `:checkhealth renamer` to make sure everything is installed.
  2. Put a `require('renamer').setup()` call somewhere in your neovim config.
  3. Read |renamer.setup| to check what config keys are available and what
     you can put inside the setup call
  4. Evalulate it working with `:lua require('renamer').rename()`

To find out more:
https://github.com/filipdutescu/renamer.nvim

  :h renamer.setup
  :h renamer.rename
  :h renamer.mappings
  :h renamer.highlights



===============================================================================
                                                              *renamer.setup()*

renamer.setup({opts}) 
    Setup function to be run by the user. Configures the aspect of the renamer
    user interface. Used to change things such as the title or border of the
    popup.

    Usage:
    >
    local mappings_utils = require('renamer.mappings.utils')
    require('renamer').setup {
        -- The popup title, shown if `border` is true
        title = 'Rename',
        -- The padding around the popup content
        padding = {
            top = 0,
            left = 0,
            bottom = 0,
            right = 0,
        },
        -- The minimum width of the popup
        min_width = 15,
        -- The maximum width of the popup
        max_width = 45,
        -- Whether or not to shown a border around the popup
        border = true,
        -- The characters which make up the border
        border_chars = { '─', '│', '─', '│', '╭', '╮', '╯', '╰' },
        -- Whether or not to highlight the current word references through LSP
        show_refs = true,
        -- Whether or not to add resulting changes to the quickfix list
        with_qf_list = true,
        -- Whether or not to enter the new name through the UI or Neovim's `input`
        -- prompt
        with_popup = true,
        -- The keymaps available while in the `renamer` buffer. The example below
        -- overrides the default values, but you can add others as well.
        mappings = {
            ['<c-i>'] = mappings_utils.set_cursor_to_start,
            ['<c-a>'] = mappings_utils.set_cursor_to_end,
            ['<c-e>'] = mappings_utils.set_cursor_to_word_end,
            ['<c-b>'] = mappings_utils.set_cursor_to_word_start,
            ['<c-c>'] = mappings_utils.clear_line,
            ['<c-u>'] = mappings_utils.undo,
            ['<c-r>'] = mappings_utils.redo,
        },
        -- Custom handler to be run after successfully renaming the word. Receives
        -- the LSP 'textDocument/rename' raw response as its parameter.
        handler = nil,
    }
<


    Parameters: ~
        {opts}          (table)     options to pass to the setup function

    Fields: ~
        {title}         (string)    title of the popup, shown on the top border
                                    (default: 'Rename')
        {padding}       (table)     table of integer values that define the
                                    padding of the popup, as such:
                                    above/right/below/left
                                    (default: { top = 0, left = 0, bottom = 0,
                                    right = 0 })
        {min_width}     (integer)   minimum width that the popup should have
                                    (default: 15)
        {max_width}     (integer)   maximum width that the popup should have
                                    (default: 45)
        {border}        (boolean)   defines whether or not to draw the border
                                    (default: true)
        {border_chars}  (list)      list of characters to use for the border,
                                    with the possible values being:
                                    - 1 character to use all around, e.g. '*'
                                    - border/corners
                                    - top/right/bottom/left
                                    - top/right/bottom/left, followed by
                                      topleft/topright/botright/botleft
                                    (default: { '─', '│', '─', '│',
                                    '╭', '╮', '╯', '╰' })
        {show_refs}     (boolean)   defines whether or not to highlight the
                                    current word references through the
                                    built-in LSP (default: true)
        {with_qf_list}  (boolean)   defines whether or not to add the
                                    resulting changes to the |quickfix| list
                                    (default: true)
        {with_popup}    (boolean)   defines whether or not to use the UI or
                                    Neovim's |vim.fn.input| function to enter
                                    the new name
                                    (default: true)
        {mappings}      (table)     the keymaps that should be available in
                                    the buffer, alongside their respective
                                    actions (default: see
                                    |lua/renamer/mappings/init.lua|)
        {handler}       (function)  custom handler to be run after
                                    successfully renaming the word; receives
                                    the raw LSP `textDocument/rename` response
                                    as its parameter (default: nil)




===============================================================================
                                                             *renamer.rename()*

renamer.rename({opts})
    Function that renames the word under the cursor, using Neovim's built in
    LSP features (see |vim.lsp.buf_request()|). Creates a popup next to the
    cursor, starting at the beginning of the word.

    The popup is drawn below the current line, if there is enough space,
    otherwise on the one above it.

    Usage:
    >
    require('renamer').rename()
<
    To rename without having the existing name in the popup, use the following:
    >
    require('renamer').rename {
        empty = true,
    }
<


    Parameters: ~
        {opts}      (table)     options to pass to the rename function

    Fields: ~
        {empty}     (boolean)   defines whether or not the popup should
                                contain the initial word or be empty
                                (default: true)




===============================================================================
                                                             *renamer.mappings*

Mappings are different key combinations used to help you navigate the `renamer`
buffer window. The following are mapped by default and can be overriden as
described in |renamer.setup|:

                                                                        *<c-i>*
<c-i>               Go to the start of the line (or buffer, since it only
                    contains one line). Behind the scenes, it uses the "I"
                    normal mode keymap.

                        See `:help I`

                                                                        *<c-a>*
<c-a>               Go to the end of the line (or buffer, since it only
                    contains one line). Behind the scenes, it uses the "A"
                    normal mode keymap.

                        See `:help A`

                                                                        *<c-e>*
<c-e>               Go to the end of the word currently under the cursor.
                    Behind the scenes, it uses the "e" normal mode keymap.

                        See `:help e`

                                                                        *<c-b>*
<c-b>               Go to the beginning of the word currently under the
                    cursor. Behind the scenes, it uses the "b" normal mode
                    keymap.

                        See `:help b`

                                                                        *<c-c>*
<c-c>               Clears the line (or buffer, since it only contains one
                    line). Behind the scenes, it uses the "0C" normal mode
                    keymaps.

                        See `:help 0`, `:help C`

                                                                        *<c-u>*
<c-u>               Undo changes. Behind the scenes, it uses the "u" normal
                    mode keymap.

                        See `:help u`

                                                                        *<c-r>*
<c-r>               Redo changes that were undone. Behind the scenes, it uses
                    the "<c-r>" normal mode keymap.

                        See `:help CTRL-R`


To change existing mappings or add new ones, the value needed to be passed in the
mappings field is a Lua function. Here is an example of how to change `<c-c>`'s
behaviour from clearing the line to closing the popup:
>
    -- other setup code...

    ['<c-c>'] = function()
        vim.api.nvim_input('<esc>')
    end

    -- other setup code...
<



===============================================================================
                                                           *renamer.highlights*

Highlights are defined to ensure that, should the defaults make the plugin
look weird or be ilegible, the user has the option to swap them for others.
The following groups are defined:

RenamerNormal: ~
    Controls the aspect of the text inside the modifiable buffer (which is the
    one used to rename the word under the cursor). By default, it is also the
    highlight group used by `RenamerBorder` (default: links to the |Normal|
    highlight group).

    An example of how to change the colour is:
        `hi default link RenamerNormal Pmenu`

RenamerBorder: ~
    This controls the aspect of the border surrounding the modifiable buffer
    if it was enabled. (default: links to the `RenamerNormal` highlight group).

    An example of how to change the colour is:
        `hi default link RenamerBorder Pmenu`

RenamerTitle: ~
    This controls the aspect of the popup title, found on the top border, if
    border and title are enabled and set respectively. (default: links to the
    `Identifier` highlight group).

    An example of how to change the colour is:
        `hi default link RenamerTitle Title`


There are also 3 other highlight groups, not directly used by Renamer.nvim,
but rather by Neovim. They affect the references highlighting which can be
toggled on/off in |renamer.setup()|. They are `LspReferenceText`,
`LspReferenceRead` and `LspReferenceWrite`. For more information, please see
|vim.lsp.buf.document_highlight()|.


vim:tw=78:ts=8:ft=help:norl:
